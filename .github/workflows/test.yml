name: Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  go-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.5'
          cache: true

      - name: Check workspace
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la

      - name: Install dependencies
        run: go mod download

      - name: Run Go tests
        run: go test ./...

  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Check workspace
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          echo "Package.json contents:"
          cat package.json

      - name: Install dependencies
        run: pnpm install

      - name: Create public directory if needed
        run: |
          if [ ! -d "public" ]; then
            echo "Creating public directory"
            mkdir -p public
            echo "<html><body>Test page</body></html>" > public/index.html
          fi

      - name: Build Go API service
        run: go build -o api-server main.go

      - name: Start server and run frontend tests
        run: |
          # 直接启动API服务器
          echo "Starting API server..."
          ./api-server --port 3000 > api_server.log 2>&1 &
          DEV_SERVER_PID=$!

          # 等待服务器启动
          echo "Waiting for server to start..."
          sleep 10

          # 检查服务器是否启动
          if curl -s http://localhost:3000 > /dev/null; then
            echo "✅ API server is running"
          else
            echo "❌ API server failed to start. Checking logs:"
            cat api_server.log
            echo "⚠️ Server failed to start, but trying tests anyway"
          fi

          # 显示运行进程
          echo "Running processes:"
          ps aux | grep -E 'api-server'

          # 设置超时，确保即使测试卡住也能结束
          timeout_seconds=120

          # 运行前端测试（使用pnpm）
          echo "📋 Running frontend tests..."
          timeout $timeout_seconds pnpm run test:frontend
          TEST_EXIT_CODE=$?

          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "⚠️ First test run failed with code $TEST_EXIT_CODE, retrying..."
            sleep 5
            timeout $timeout_seconds pnpm run test:frontend
            TEST_EXIT_CODE=$?
          fi

          # 清理所有进程
          echo "🧹 Cleaning up processes..."
          kill $DEV_SERVER_PID 2>/dev/null || true

          echo "Killing all related processes..."
          pkill -f "api-server" || true

          # 显示测试日志
          echo "📋 Test logs:"
          if [ -f "test.log" ]; then
            cat test.log
          fi

          echo "Tests completed with exit code: $TEST_EXIT_CODE"
          exit $TEST_EXIT_CODE
